// Code generated by protoc-gen-gokit-endpoint. DO NOT EDIT.
// versions:
// protoc-gen-gokit-endpoint 0.0.8

package v1

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	log "github.com/go-kit/kit/log"
	stdopentracing "github.com/opentracing/opentracing-go"
	//"nonoDemo/pkg/utils/observability/tracing"

	opentracing "github.com/go-kit/kit/tracing/opentracing"

	tracing "git.aimap.io/LBM/mock-demo/observability/tracing"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

func makeCreateEndpoint(s MetaTestServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*Req)
		return s.Create(ctx, req)
	}
}
func decodeCreateRequest(_ context.Context, req interface{}) (interface{}, error) {
	return req, nil
}
func encodeCreateResponse(_ context.Context, rsp interface{}) (interface{}, error) {
	return rsp, nil
}
func MakeCreateHandler(s MetaTestServiceServer) *grpctransport.Server {
	return grpctransport.NewServer(makeCreateEndpoint(s), decodeCreateRequest, encodeCreateResponse)
}

type MetaTestService struct {
	UnimplementedMetaTestServiceServer
	service       MetaTestServiceServer
	options       []func(string) grpctransport.ServerOption
	middlewares   []func(endpoint.Endpoint) endpoint.Endpoint
	tracer        stdopentracing.Tracer
	tp            trace.TracerProvider
	logger        log.Logger
	CreateHandler grpctransport.Handler
}

func NewMetaTestService(s MetaTestServiceServer, logger log.Logger) *MetaTestService {
	return &MetaTestService{
		service: s,
		logger:  logger,
	}
}
func (s *MetaTestService) WithOptions(options ...func(string) grpctransport.ServerOption) {
	s.options = options
}

func (s *MetaTestService) WithMiddlewares(middlewares ...func(endpoint.Endpoint) endpoint.Endpoint) {
	s.middlewares = middlewares
}
func (s *MetaTestService) WithTracing(tracer stdopentracing.Tracer) {
	s.tracer = tracer
}
func (s *MetaTestService) WithTracerProvider(tp trace.TracerProvider) {
	s.tp = tp
}
func (s *MetaTestService) Build() {
	s.buildCreate()
}
func (s *MetaTestService) RegisterService(server *grpc.Server) {
	RegisterMetaTestServiceServer(server, s)
}
func (s *MetaTestService) buildCreate() {
	CreateEndpoint := makeCreateEndpoint(s.service)
	var ops []grpctransport.ServerOption
	if s.tracer != nil {
		CreateEndpoint = opentracing.TraceServer(s.tracer, "api.metadata.v1.MetaTestService.Create")(CreateEndpoint)
		ops = append(ops, grpctransport.ServerBefore(opentracing.GRPCToContext(s.tracer, "api.metadata.v1.MetaTestService.Create", s.logger)))
	}
	for _, middleware := range s.middlewares {
		CreateEndpoint = middleware(CreateEndpoint)
	}
	for _, option := range s.options {
		ops = append(ops, option("api.metadata.v1.MetaTestService.Create"))
	}
	s.CreateHandler = grpctransport.NewServer(CreateEndpoint, decodeCreateRequest, encodeCreateResponse, ops...)
}
func (s *MetaTestService) Create(ctx context.Context, req *Req) (*Response, error) {
	_, response, err := s.CreateHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*Response), nil
}

type MetaTestServiceGrpcClient struct {
	conn           *grpc.ClientConn
	logger         log.Logger
	tracer         stdopentracing.Tracer
	tp             trace.TracerProvider
	CreateEndpoint endpoint.Endpoint
}

func NewMetaTestServiceGrpcClient(conn *grpc.ClientConn, logger log.Logger) *MetaTestServiceGrpcClient {
	return &MetaTestServiceGrpcClient{
		conn:   conn,
		logger: logger,
	}
}
func (client *MetaTestServiceGrpcClient) WithTracing(tracer stdopentracing.Tracer) {
	client.tracer = tracer
}
func (client *MetaTestServiceGrpcClient) WithTracerProvider(tp trace.TracerProvider) *MetaTestServiceGrpcClient {
	client.tp = tp
	return client
}
func (client *MetaTestServiceGrpcClient) Build() {
	client.CreateEndpoint = client.buildCreate()
}
func (client *MetaTestServiceGrpcClient) buildCreate() endpoint.Endpoint {
	options := []grpctransport.ClientOption{}
	if client.tracer != nil {
		options = append(options, grpctransport.ClientBefore(opentracing.ContextToGRPC(client.tracer, client.logger)))
	}
	if client.tp != nil {
		options = append(options, grpctransport.ClientBefore(tracing.ContextToGRPC(client.tp, client.logger)))
	}
	endpoint := grpctransport.NewClient(
		client.conn,
		"api.metadata.v1.MetaTestService",
		"Create",
		func(ctx context.Context, i interface{}) (interface{}, error) { return i, nil },
		func(ctx context.Context, i interface{}) (interface{}, error) { return i, nil },
		Response{}, options...).Endpoint()
	if client.tracer != nil {
		endpoint = opentracing.TraceClient(client.tracer, "Create")(endpoint)
	}
	if client.tp != nil {
		endpoint = tracing.TraceClient(client.tp, "Create")(endpoint)
	}
	return endpoint
}
func (client *MetaTestServiceGrpcClient) Create(ctx context.Context, request *Req) (*Response, error) {
	resp, err := client.CreateEndpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return resp.(*Response), err
}
