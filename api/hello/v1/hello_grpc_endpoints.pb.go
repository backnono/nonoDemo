// Code generated by protoc-gen-gokit-endpoint. DO NOT EDIT.
// versions:
// protoc-gen-gokit-endpoint 0.1.0

package v1

import (
	context "context"
	grpc "nonoDemo/pkg/adapters/grpc"
	framework "nonoDemo/pkg/framework"
	tracing "nonoDemo/pkg/utils/observability/tracing"
	endpoint "github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdgrpc "google.golang.org/grpc"
)

func makeLoginEndpoint(s UserServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*LoginRequest)
		return s.Login(ctx, req)
	}
}
func makeLoginHandler(s UserServiceServer) *grpctransport.Server {
	return grpctransport.NewServer(makeLoginEndpoint(s), grpc.DecodeRequest, grpc.EncodeResponse)
}

func makeCreateUserEndpoint(s UserServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateUserRequest)
		return s.CreateUser(ctx, req)
	}
}
func makeCreateUserHandler(s UserServiceServer) *grpctransport.Server {
	return grpctransport.NewServer(makeCreateUserEndpoint(s), grpc.DecodeRequest, grpc.EncodeResponse)
}

func makeGetUserEndpoint(s UserServiceServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetUserRequest)
		return s.GetUser(ctx, req)
	}
}
func makeGetUserHandler(s UserServiceServer) *grpctransport.Server {
	return grpctransport.NewServer(makeGetUserEndpoint(s), grpc.DecodeRequest, grpc.EncodeResponse)
}

type UserService struct {
	UnimplementedUserServiceServer
	service UserServiceServer
	options grpc.Options
	logger  framework.Logger

	LoginHandler      grpctransport.Handler
	CreateUserHandler grpctransport.Handler
	GetUserHandler    grpctransport.Handler
}

func NewUserService(s UserServiceServer, logger framework.Logger) *UserService {
	return &UserService{
		service: s,
		logger:  logger,
	}
}

func (s *UserService) WithOptions(options grpc.Options) {
	s.options = options
}
func (s *UserService) Build() {
	s.buildLogin()
	s.buildCreateUser()
	s.buildGetUser()
}

func (s *UserService) buildLogin() {
	endpoint := makeLoginEndpoint(s.service)
	var ops []grpctransport.ServerOption
	if s.options.Trace() {
		endpoint = grpc.TraceServerMiddleware(tracing.GlobalTraceProvider())(endpoint)
		ops = append(ops, grpctransport.ServerBefore(tracing.GRPCToContext(s.logger)))
	}
	for _, middleware := range s.options.Middlewares() {
		endpoint = middleware(endpoint)
	}
	s.LoginHandler = grpctransport.NewServer(endpoint, grpc.DecodeRequest, grpc.EncodeResponse, ops...)
}

func (s *UserService) buildCreateUser() {
	endpoint := makeCreateUserEndpoint(s.service)
	var ops []grpctransport.ServerOption
	if s.options.Trace() {
		endpoint = grpc.TraceServerMiddleware(tracing.GlobalTraceProvider())(endpoint)
		ops = append(ops, grpctransport.ServerBefore(tracing.GRPCToContext(s.logger)))
	}
	for _, middleware := range s.options.Middlewares() {
		endpoint = middleware(endpoint)
	}
	s.CreateUserHandler = grpctransport.NewServer(endpoint, grpc.DecodeRequest, grpc.EncodeResponse, ops...)
}

func (s *UserService) buildGetUser() {
	endpoint := makeGetUserEndpoint(s.service)
	var ops []grpctransport.ServerOption
	if s.options.Trace() {
		endpoint = grpc.TraceServerMiddleware(tracing.GlobalTraceProvider())(endpoint)
		ops = append(ops, grpctransport.ServerBefore(tracing.GRPCToContext(s.logger)))
	}
	for _, middleware := range s.options.Middlewares() {
		endpoint = middleware(endpoint)
	}
	s.GetUserHandler = grpctransport.NewServer(endpoint, grpc.DecodeRequest, grpc.EncodeResponse, ops...)
}

func (s *UserService) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	_, response, err := s.LoginHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*LoginResponse), nil
}

func (s *UserService) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	_, response, err := s.CreateUserHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*CreateUserResponse), nil
}

func (s *UserService) GetUser(ctx context.Context, req *GetUserRequest) (*LoginRequest, error) {
	_, response, err := s.GetUserHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*LoginRequest), nil
}

func (s *UserService) RegisterService(server *stdgrpc.Server) {
	RegisterUserServiceServer(server, s)
}
